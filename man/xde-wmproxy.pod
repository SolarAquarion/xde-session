=pod

=head1 NAME

xde-wmproxy - provide a session management proxy for an EWMH window manager

=head1 SYNOPSIS

B<xde-wmproxy> [I<OPTIONS>] COMMAND ARG ...

=head1 DESCRIPTION

B<xde-wmproxy> provides an X Session Management proxy for an NetWM/EWMH,
WinWM/WMH or ICCCM compliant window managers that do not provide support
for X Session Management on their own.

=head1 OPTIONS

=over

=item B<-c>, B<-clientId>

Specifies the session ID used by B<xde-wmproxy> in the previous session.
Normally only invoked in this fashion when restarted by an upper layer
session manager.

=item B<-r>, B<-restore> I<SAVEFILE>

Specifies the file used by B<xde-wmproxy> to save state in the previous
session.  Normally only invoked in this fashion when restarted by an
upper layer session manager.

=back

=head1 USAGE

B<xde-wmproxy> allows X window managers that do not support X11R6
session management to participate in an X11R6 session.  For
B<xde-wmproxy> to act as a proxy for a window manager, B<xde-wmproxy>
must be used to launch the window manager.

ICCCM 2.0 says the following:

 5.2. Window Manger Support for Session Management

    A window manager supporting session management must register with
    the session manager and obtain its own client-ID.  The window
    manager should save and restore information such as WM_STATE, the
    layout of windows on the screen, and their stacking order, for every
    client window that havs a valid SM_CLIENT_ID property (on itself, or
    on the window managed by WM_CLIENT_LEADER) and that can be uniquely
    identified.  Clients are allowed to change this state during the
    first phase of the session checkpoint process.  Therefore, window
    managers shouldr request a second checkpoint phase and save clients'
    state only during that phase.

Should the window manager not register with B<xde-wmproxy> to obtain its
own session management client-ID, B<xde-wmproxy> will perform these
actions on behalf of the window manager.

Should the window manager register, B<xde-wmproxy> will still perform
actions on behalf of the window manager to the extent possible.


=head1 BEHAVIOUR

=head2 SESSION MANAGEMENT

When B<xde-wmproxy> starts, it observes the C<SESSION_MANAGER>
environment variable and establishes a client connection to the session
manager.  If the C<SESSION_MANAGER> environment variable is not set, it
becomes its own session manager and populates the C<SESSION_MANAGER>
environment variable before launching any window manager.

In either event, when managing the window manager from a session point
of view, B<xde-wmproxy> manages X11 Session Management of the window
manager state, either in parallel to or in lieue of X11 Session
Management performed by the window manager itself.  It can also handle
the concept of a session that is defined for more than one window
manager.  It assists the window manager in the following ways:

=over

=item 1.

Provides ICCCM 2.0 Section 5.2 Window Manager Support for Session
Management.  It performs this action as a meta-WM in parallel or in lieue
of session management performed by the window manager itself.  For known
window managers it can enhance session management by detecting and
managing windowmaker dock applications and system tray icons. (Note that
L<xde-dock(1)> can do this too.)

=item 2.

Provides the services of L<smproxy(1)>, but interrogating windows
present on the display and performing old-style session management as
necessary.

=item 3.

It can provide the ability to save the state of the session when a
window manager exits or restarts.

=item 4.

There is no reason why it should not be able to provide multiple session
management for styles, themes, menus, primary window manager
configuration files, and other session configuration for known window
managers.  XDE has an impressive list of known window managers.  (Note
that L<xde-theme(1)> can do this too).

=item 5.

It can perform setup and autostart capabilities for window mangers as
well.  Note that L<xde-autostart(1)> can perform autostart capabilities
too; however, B<xde-wmproxy(1)> can make auto-started tasks children of
the window manager itself.

=item 6.

It can perform startup notification assistance for window managers.

=back

=head2 WINDOW MANAGER MANAGEMENT

B<xde-wmproxy> first takes ownership of the C<WM_S%d> manager selection
for each screen on the X display identified by the B<DISPLAY>
environment variable (or B<-display> option).  It then attempts to
select C<SubstructureRedirect> on the root window of each managed screen.
If it cannot obtain the C<WM_S%d> selection or C<SubstructureRedirect>
input mask, a non-compliant window manager is running and it exits with
an error.  This is what an ICCCM 2.0 compliant window manager does.  It
ensures that no ICCCM 2.0 non-compliant window manager is running.

It then releases the C<SubstructureRedirect> input selection mask and
launches the specified window manager.  If the launched window manager
is ICCCM 2.0 compliant, it will take ownership of the C<WM_S%d> manager
selection; if it is not, B<xde-wmproxy> will retain ownership of the
selection.

If another window manager is run from within the first (as is possible
from root menu selection on many window managers), the first manager
will release its resources and then C<exec> the second.  The second
window manager will have the same PID as the first.  If the first
manager was ICCCM 2.0 compliant, it will release the manager selection
by destroying its selection window.  Once the second window manager has
started up, B<xde-wmproxy> will reacquire the B<WM_S%d> window manager
selection if it has not been obtained by the second manager.

If another window manager is run from outside of the first, and the
second window manager is ICCCM 2.0 compliant, it will attempt to obtain
the C<WM_S%d> selection, either from the first window manager or from
B<xde-wmproxy>.  When B<xde-wmproxy> gets the C<WM_S%d> selection taken
from it, it will kill the ICCCM 2.0 non-compliant first window manager
before destroying its selection window.

If the second window manager is not ICCCM 2.0 compliant, it will not run
because the first window manager will not release the
C<SubstructureRedirect> input selection mask on the root window of the
managed screen.  Such a second window manager can still be run from
outside of the first by invoking it using B<xde-wmproxy> as a wrapper to
launch the window manager.

=head1 BUGS

B<xde-wmproxy> had no known bugs at the time of release.  Please report
bugs for current versions to the source code repository at
L<https://github.com/bbidulock/xde-session/issues>.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

See B<--copying> for full copyright notice and copying permissions.

=head1 LICENSE

See the F<COPYING> file in the distribution or use the B<--copying> flag
to display copying permissions.

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:
