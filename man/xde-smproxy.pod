=pod

=head1 NAME

xde-smproxy - X Session Management proxy for the X Desktop Environment (XDE)

=head1 SYNOPSIS

B<xde-smproxy> [I<OPTIONS>]

=head1 DESCRIPTION

B<xde-smproxy> provides an X Session Management X11R6 proxy as well
assistance for NetWM/EWMH, WinWM/WMH or ICCCM compliant window managers
that do not provide support for X Session Management on their own.

=head1 OPTIONS

=over

=item B<-c>, B<-clientId> I<CLIENTID>

Specifies the session ID used by B<xde-smproxy> in the previous session.
Normally only invoked in this fashion when restarted by an upper layer
session manager.

=item B<-r>, B<-restore> I<SAVEFILE>

Specifies the file used by B<xde-smproxy> to save state in the previous
session.  Normally only invoked in this fashion when restarted by an
upper layer session manager.

=item B<-d>, B<-dockApps>

Perform proxy services also for L<wmaker(1)> dock applications.  This is
not necessary if L<xde-dockmgr(1)> is run and provides a proxy for
session management of L<wmaker(1)> dock applications.

=item B<-s>, B<-systemTray>

Perform proxy services also for L<wmaker(1)> system tray icons for any
system tray icons that do not support X11R6 session management on their
own and whose client leaders have no other windows mapped.  This is also
not necessary if L<xde-traymgr(1)> is run an provides a proxy for
session management of system tray applications.

=item B<-w>, B<-windowManager>

Perform session management assistance for lightweight window managers.

=back

=head1 USAGE

B<xde-smproxy> allows X applications that do not support X11R6 session
management to participate in an X11R6 session.  B<xde-smproxy> requires
the presence of an X Session Manager; otherwise it will exit when run.

For B<xde-smproxy> to act as a proxy for an X application that does not
support X11R6 session management, one of the following must be true:

=over

=item 1.

The application maps a top-level window containing the
B<WM_CLIENT_LEADER> property.  This property provides a pointer to the
client leader window that contains the B<WM_CLASS>, B<WM_NAME>,
B<WM_COMMAND> and B<WM_CLIENT_MACHINE> properties.

A non NetWM/EWMH or WinWM/WMH compliant window manager must add the
B<WM_STATE> property to these windows in compliance with ICCCM 2.0 for
them to be detected.  For NetWM/EWMH or WinWM/WMH compliant window
managers, the window must be present in the B<_NET_CLIENT_LIST> and
B<_NET_CLIENT_LIST_STACKING> lists, or in the B<_WIN_CLIENT_LIST> list.

=item 2.

The application maps a top-level window that does not contain the
B<WM_CLIENT_LEADER> property.  However, this top-level window contains
the B<WM_CLASS>, B<WM_NAME>, B<WM_COMMAND> and B<WM_CLIENT_MACHINE>
properties.

A non NetWM/EWMH or WinWM/WMH compliant window manager must add the
B<WM_STATE> property to these windows in compliance with ICCCM 2.0 for
them to be detected.  For NetWM/EWMH or WinWM/WMH compliant window
managers, the window must be present in the B<_NET_CLIENT_LIST> and
B<_NET_CLIENT_LIST_STACKING> lists, or in the B<_WIN_CLIENT_LIST> list.

=item 3.

Startup notification is provided when the application is launched.  In
this case B<xde-smproxy> obtains additional information from the startup
notification messages and can use the B<WM_CLASS> property and possibly
the B<_NET_STARTUP_ID> property to determine properties that are
missing, such as B<WM_NAME>, B<WM_COMMAND>, B<WM_CLIENT_MACHINE>,
B<_NET_WM_PID>, B<_NET_WM_DESKTOP>, B<_WIN_WORKSPACE> or
B<_DT_WORKSPACE_PRESENCE>.  In general, when the application is launched
using B<xdg-launch(1)>, all the necessary information is available.

=item 4.

When the B<-dockApp> option is specified and the application is a
L<wmaker(1)> dock application.  A Window Maker dock application is a
top-level window that has the following characteristics:

=over

=item a)

The top-level window contains a B<WM_HINTS> property.  The property
specifies an initial state of C<WithdrawnState>; or,

=item b)

in support of post 2.4.0 GTK+ dock applications, has any initial state
but has the C<StateHint>, C<WindowGroupHint> and C<IconWindowHint> (and
possibly the C<IconPositionHint>) flags set; or,

=item c)

has the B<WM_CLASS> property set with a I<res_class> of C<DockApp>.

=back

The B<WM_STATE> property must not be added to these windows (otherwise
they are treated as non-dock application windows).  Dock applications
typically also have the B<WM_CLASS>, B<WM_NAME>, B<WM_COMMAND>,
B<WM_CLIENT_MACHINE> and B<WM_CLIENT_LEADER> properties set.

In many light-weight window managers supporting Window Maker dock
applications, the order of the applications in the dock depends largely
on the order of execution.  The position in the dock must be determined
to ascertain the order (applications may have been launched at the same
time and raced for position).  This additional information is saved by
the session manager proxy.

=item 5.

When the B<-systemTray> option is specified and the application is a
system tray icon conforming to the freedesktop.org system tray
specification, but does not support X11R6 session management.

Typically, system tray icons provide a B<WM_CLIENT_LEADER> property that
points to a leader window with the B<WM_CLASS>, B<WM_NAME>,
B<WM_COMMAND> and B<WM_CLIENT_MACHINE> properties set.  The system tray
icon itself can be identified by the presence of an B<_XEMBED_INFO>
property (and have no B<WM_STATE> property set).  They may be visible or
not.

For many light-weight window managers, the system tray is provided by an
application separate from the window manager.  Often the order of icons
in the system tray is dependent largely on the order of execution of the
applications that install the icons.  The position in the system tray
must be determined to ascertain the order (applications may have been
launched at the same time and raced for position).  This additional
information is saved by the session manager proxy.

=back

Applications that support the B<WM_SAVE_YOURSELF> protocol will receive
a B<WM_SAVE_YOURSELF> client message each time the session manager
issues a checkpoint or shutdown.  This allows applications to save
state.  If an application does not support the B<WM_SAVE_YOURSELF>
protocol, then the proxy will provide enough information to the session
manager to restart the application (using B<WM_COMMAND>), but no state
will be restored.

When the B<-windowManager> option is specified, during save-yourself
phase 2, B<xde-smproxy> will save window position, desktop, NetWM/EWMH
or WinWM/WMH state, layer, stacking order, geometry and position, and
other controllable information concerning every window in the system
(not just those that are proxied).  Otherwise, when the
B<-windowManager> option is not specified, save-yourself phase 2 window
manager state will only be saved for proxied windows.

=head1 BUGS

B<xde-smproxy> had no known bugs at the time of release.  Please report
bugs for current versions to the source code repository at
L<https://github.com/bbidulock/xde-session/issues>.

=head1 HISTORY

I wrote B<xde-smproxy(1)> because the normal Xorg L<smproxy(1)> was
lacking in a number of respects: it does not provide assistance for
window managers; cannot identify Window Maker dock applications; cannot
identify applications that have system tray icons but no other window
mapped; does not use startup notification nor F</proc> file system for
additional information.

=head1 SEE ALSO

L<xdg-launch(1)>,
L<smproxy(1)>,
L<xsm(1)>,
L<xde-dockmgr(1)>,
L<xde-traymgr(1)>.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

See B<--copying> for full copyright notice and copying permissions.

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:
